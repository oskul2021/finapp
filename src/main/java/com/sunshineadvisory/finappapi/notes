Voici un guide étape par étape pour implémenter l'application de financement participatif avec Spring Boot et MySQL :

Prérequis
Java 17+
Spring Boot
Maven
MySQL
Docker (pour la dockerisation)
Étape 1 : Créer un Projet Spring Boot
Créez un nouveau projet Spring Boot :

Vous pouvez utiliser Spring Initializr.
Sélectionnez les dépendances suivantes :
Spring Web
Spring Data JPA
MySQL Driver
Spring Boot DevTools (facultatif, pour le rechargement automatique)
Spring Security (pour la gestion des utilisateurs)
Téléchargez le projet généré et importez-le dans votre IDE (Eclipse, IntelliJ, etc.).

Étape 2 : Configurer la Connexion à la Base de Données MySQL
Dans le fichier src/main/resources/application.properties, configurez la connexion à MySQL :

properties
Copier le code
# Configuration de la base de données
spring.datasource.url=jdbc:mysql://localhost:3306/financement_db
spring.datasource.username=root
spring.datasource.password=rootpassword
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuration de JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
Étape 3 : Créer les Entités (Utilisateur et Don)
Dans le package com.example.financement.models, créez les classes Java suivantes :

Utilisateur.java
java
Copier le code
package com.example.financement.models;

import javax.persistence.*;
import java.util.Set;

@Entity
public class Utilisateur {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String nom;
    private String email;
    private String motDePasse;
    private Double solde = 0.0;

    @Enumerated(EnumType.STRING)
    private Role role;

    // Getters et Setters

    public enum Role {
        DONATEUR, BENEFICIAIRE
    }
}
Don.java
java
Copier le code
package com.example.financement.models;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
public class Don {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    private Utilisateur donateur;

    @ManyToOne
    private Utilisateur beneficiaire;

    private Double montant;
    private String description;
    private LocalDate date;

    @Enumerated(EnumType.STRING)
    private Statut statut = Statut.EN_ATTENTE;

    private Double objectif;
    private Double montantCollecte = 0.0;

    public enum Statut {
        EN_ATTENTE, TERMINE, ANNULE
    }

    // Getters et Setters
}
Étape 4 : Créer les Repositories
Dans le package com.example.financement.repositories, créez les interfaces de repository.

UtilisateurRepository.java
java
Copier le code
package com.example.financement.repositories;

import com.example.financement.models.Utilisateur;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UtilisateurRepository extends JpaRepository<Utilisateur, Long> {
    Optional<Utilisateur> findByEmail(String email);
}
DonRepository.java
java
Copier le code
package com.example.financement.repositories;

import com.example.financement.models.Don;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DonRepository extends JpaRepository<Don, Long> {
}
Étape 5 : Créer les Services
Dans le package com.example.financement.services, créez des classes de services.

UtilisateurService.java
java
Copier le code
package com.example.financement.services;

import com.example.financement.models.Utilisateur;
import com.example.financement.repositories.UtilisateurRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UtilisateurService {
    @Autowired
    private UtilisateurRepository utilisateurRepository;

    public Utilisateur enregistrerUtilisateur(Utilisateur utilisateur) {
        return utilisateurRepository.save(utilisateur);
    }

    public List<Utilisateur> obtenirTousLesUtilisateurs() {
        return utilisateurRepository.findAll();
    }

    public Utilisateur obtenirUtilisateurParId(Long id) {
        return utilisateurRepository.findById(id).orElse(null);
    }
}
DonService.java
java
Copier le code
package com.example.financement.services;

import com.example.financement.models.Don;
import com.example.financement.repositories.DonRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class DonService {
    @Autowired
    private DonRepository donRepository;

    public Don creerDon(Don don) {
        return donRepository.save(don);
    }

    public List<Don> obtenirTousLesDons() {
        return donRepository.findAll();
    }

    public Don obtenirDonParId(Long id) {
        return donRepository.findById(id).orElse(null);
    }

    public Don mettreAJourDon(Don don) {
        return donRepository.save(don);
    }
}
Étape 6 : Créer les Contrôleurs REST
Dans le package com.example.financement.controllers, créez les contrôleurs REST.

UtilisateurController.java
java
Copier le code
package com.example.financement.controllers;

import com.example.financement.models.Utilisateur;
import com.example.financement.services.UtilisateurService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/utilisateurs")
public class UtilisateurController {
    @Autowired
    private UtilisateurService utilisateurService;

    @PostMapping
    public Utilisateur enregistrerUtilisateur(@RequestBody Utilisateur utilisateur) {
        return utilisateurService.enregistrerUtilisateur(utilisateur);
    }

    @GetMapping
    public List<Utilisateur> obtenirTousLesUtilisateurs() {
        return utilisateurService.obtenirTousLesUtilisateurs();
    }

    @GetMapping("/{id}")
    public Utilisateur obtenirUtilisateurParId(@PathVariable Long id) {
        return utilisateurService.obtenirUtilisateurParId(id);
    }
}
DonController.java
java
Copier le code
package com.example.financement.controllers;

import com.example.financement.models.Don;
import com.example.financement.services.DonService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/dons")
public class DonController {
    @Autowired
    private DonService donService;

    @PostMapping
    public Don creerDon(@RequestBody Don don) {
        return donService.creerDon(don);
    }

    @GetMapping
    public List<Don> obtenirTousLesDons() {
        return donService.obtenirTousLesDons();
    }

    @GetMapping("/{id}")
    public Don obtenirDonParId(@PathVariable Long id) {
        return donService.obtenirDonParId(id);
    }

    @PutMapping("/{id}")
    public Don mettreAJourDon(@PathVariable Long id, @RequestBody Don don) {
        don.setId(id);
        return donService.mettreAJourDon(don);
    }
}
Étape 7 : Dockeriser l'Application
Créez un Dockerfile à la racine du projet :

Dockerfile
Copier le code
# Utiliser l'image Java comme base
FROM openjdk:17-jdk-slim

# Créer un répertoire de travail
WORKDIR /app

# Copier le fichier JAR
COPY target/financement-app.jar /app/financement-app.jar

# Exposer le port
EXPOSE 8080

# Commande pour exécuter l'application
ENTRYPOINT ["java", "-jar", "financement-app.jar"]
Créez un fichier docker-compose.yml :

yaml
Copier le code
version: '3.8'
services:
  app:
    build: .
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/financement_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: rootpassword

  db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: financement_db
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

volumes:
  db_data:
Étape 8 : Compiler et Lancer le Projet
Compilez le projet avec Maven :

bash
Copier le code
mvn clean package
Construisez l'image Docker :

bash
Copier le code
docker build -t financement-app .
Lancez les services avec Docker Compose :

bash
Copier le code
docker-compose up
Le projet est maintenant accessible sur http://localhost:8080.

Étape 9 : Tester les Points de Terminaison
Vous pouvez tester les endpoints avec des outils comme Postman.

Étape 10 : Pousser le Projet sur un Dépôt Git
Créez un dépôt public sur GitHub et poussez le code pour le rendre accessible.

Cela vous donne une application complète de financement participatif de base avec Spring Boot, MySQL, et Docker.






